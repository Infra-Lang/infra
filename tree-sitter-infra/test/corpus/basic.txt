================================================================================
Variable declarations
================================================================================

let x = 42
let name = "Alice"
let flag = true

---

(source_file
  (variable_declaration
    (identifier)
    (number_literal))
  (variable_declaration
    (identifier)
    (string_literal))
  (variable_declaration
    (identifier)
    (boolean_literal)))

================================================================================
Variable declarations with types
================================================================================

let x: number = 42
let name: string = "Alice"
let items: array<number> = [1, 2, 3]

---

(source_file
  (variable_declaration
    (identifier)
    (type_annotation)
    (number_literal))
  (variable_declaration
    (identifier)
    (type_annotation)
    (string_literal))
  (variable_declaration
    (identifier)
    (type_annotation
      (type_annotation))
    (array_literal
      (number_literal)
      (number_literal)
      (number_literal))))

================================================================================
Function declarations
================================================================================

function add(a, b):
    return a + b

function greet(name: string) -> string:
    return "Hello, " + name

---

(source_file
  (function_declaration
    (identifier)
    (parameter_list
      (parameter (identifier))
      (parameter (identifier)))
    (block
      (return_statement
        (additive_expression
          (identifier)
          (identifier)))))
  (function_declaration
    (identifier)
    (parameter_list
      (parameter
        (identifier)
        (type_annotation)))
    (type_annotation)
    (block
      (return_statement
        (additive_expression
          (string_literal)
          (identifier))))))

================================================================================
Control flow statements
================================================================================

if x > 0:
    print("positive")
else:
    print("negative or zero")

for item in items:
    print(item)

while counter < 10:
    counter = counter + 1

---

(source_file
  (if_statement
    (relational_expression
      (identifier)
      (number_literal))
    (block
      (expression_statement
        (postfix_expression
          (identifier)
          (argument_list
            (string_literal)))))
    (block
      (expression_statement
        (postfix_expression
          (identifier)
          (argument_list
            (string_literal))))))
  (for_statement
    (identifier)
    (identifier)
    (block
      (expression_statement
        (postfix_expression
          (identifier)
          (argument_list
            (identifier))))))
  (while_statement
    (relational_expression
      (identifier)
      (number_literal))
    (block
      (assignment_expression
        (identifier)
        (additive_expression
          (identifier)
          (number_literal))))))

================================================================================
Arrays and objects
================================================================================

let numbers = [1, 2, 3, 4, 5]
let person = {
    name: "Alice",
    age: 30,
    "city": "New York"
}

let first = numbers[0]
let name = person.name

---

(source_file
  (variable_declaration
    (identifier)
    (array_literal
      (number_literal)
      (number_literal)
      (number_literal)
      (number_literal)
      (number_literal)))
  (variable_declaration
    (identifier)
    (object_literal
      (object_pair
        (identifier)
        (string_literal))
      (object_pair
        (identifier)
        (number_literal))
      (object_pair
        (string_literal)
        (string_literal))))
  (variable_declaration
    (identifier)
    (postfix_expression
      (identifier)
      (number_literal)))
  (variable_declaration
    (identifier)
    (postfix_expression
      (identifier)
      (identifier))))

================================================================================
Import and export statements
================================================================================

import {add, subtract} from "math_utils"
import math from "math"
export function multiply(a, b):
    return a * b

---

(source_file
  (import_statement
    (identifier)
    (identifier)
    (string_literal))
  (import_statement
    (identifier)
    (string_literal))
  (export_statement
    (function_declaration
      (identifier)
      (parameter_list
        (parameter (identifier))
        (parameter (identifier)))
      (block
        (return_statement
          (multiplicative_expression
            (identifier)
            (identifier)))))))

================================================================================
Comments
================================================================================

# This is a comment
let x = 42  # Another comment

---

(source_file
  (comment)
  (variable_declaration
    (identifier)
    (number_literal))
  (comment))
