{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Infra",
  "scopeName": "source.infra",
  "patterns": [
    {
      "include": "#comments"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#numbers"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#types"
    },
    {
      "include": "#operators"
    },
    {
      "include": "#functions"
    },
    {
      "include": "#stdlib"
    },
    {
      "include": "#variables"
    },
    {
      "include": "#punctuation"
    }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.line.number-sign.infra",
          "match": "#.*$"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double.infra",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "name": "constant.character.escape.infra",
              "match": "\\\\."
            }
          ]
        },
        {
          "name": "string.quoted.single.infra",
          "begin": "'",
          "end": "'",
          "patterns": [
            {
              "name": "constant.character.escape.infra",
              "match": "\\\\."
            }
          ]
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.float.infra",
          "match": "\\b\\d+\\.\\d+\\b"
        },
        {
          "name": "constant.numeric.integer.infra",
          "match": "\\b\\d+\\b"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.infra",
          "match": "\\b(if|else|for|while|break|continue|return|try|catch|throw)\\b"
        },
        {
          "name": "keyword.other.infra",
          "match": "\\b(let|function|import|export|from)\\b"
        },
        {
          "name": "constant.language.infra",
          "match": "\\b(true|false|null)\\b"
        }
      ]
    },
    "types": {
      "patterns": [
        {
          "name": "support.type.primitive.infra",
          "match": "\\b(number|string|boolean)\\b"
        },
        {
          "name": "support.type.complex.infra",
          "match": "\\b(array|object)\\b"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.arithmetic.infra",
          "match": "\\+|\\-|\\*|\\/|%"
        },
        {
          "name": "keyword.operator.comparison.infra",
          "match": "==|!=|<|>|<=|>="
        },
        {
          "name": "keyword.operator.logical.infra",
          "match": "&&|\\|\\||!"
        },
        {
          "name": "keyword.operator.assignment.infra",
          "match": "="
        },
        {
          "name": "keyword.operator.type.infra",
          "match": ":"
        },
        {
          "name": "keyword.operator.arrow.infra",
          "match": "->"
        },
        {
          "name": "keyword.operator.union.infra",
          "match": "\\|"
        }
      ]
    },
    "functions": {
      "patterns": [
        {
          "name": "entity.name.function.infra",
          "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*(?=\\s*\\()"
        }
      ]
    },
    "stdlib": {
      "patterns": [
        {
          "name": "support.function.builtin.math.infra",
          "match": "\\b(math\\.(sqrt|pow|abs|floor|ceil|sin|cos|tan|log|exp))\\b"
        },
        {
          "name": "support.function.builtin.string.infra",
          "match": "\\b(string\\.(length|upper|lower|substring|replace|starts_with|ends_with|split|trim))\\b"
        },
        {
          "name": "support.function.builtin.array.infra",
          "match": "\\b(array\\.(length|push|pop|sort|reverse|join|map|filter|reduce|find|first|last|contains))\\b"
        },
        {
          "name": "support.function.builtin.io.infra",
          "match": "\\b(io\\.(read_file|write_file|exists|throw))\\b"
        },
        {
          "name": "support.function.builtin.infra",
          "match": "\\b(print|range)\\b"
        }
      ]
    },
    "variables": {
      "patterns": [
        {
          "name": "variable.other.infra",
          "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
        }
      ]
    },
    "punctuation": {
      "patterns": [
        {
          "name": "punctuation.definition.parameters.begin.infra",
          "match": "\\("
        },
        {
          "name": "punctuation.definition.parameters.end.infra",
          "match": "\\)"
        },
        {
          "name": "punctuation.definition.array.begin.infra",
          "match": "\\["
        },
        {
          "name": "punctuation.definition.array.end.infra",
          "match": "\\]"
        },
        {
          "name": "punctuation.definition.block.begin.infra",
          "match": "\\{"
        },
        {
          "name": "punctuation.definition.block.end.infra",
          "match": "\\}"
        },
        {
          "name": "punctuation.separator.comma.infra",
          "match": ","
        },
        {
          "name": "punctuation.separator.period.infra",
          "match": "\\."
        },
        {
          "name": "punctuation.terminator.statement.infra",
          "match": ";"
        }
      ]
    }
  }
}
