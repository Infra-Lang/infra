name: Build and Release (Enhanced)

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      create_release:
        description: "Create a new release"
        required: true
        default: "false"
        type: boolean
      run_tests:
        description: "Run tests before release"
        required: true
        default: "true"
        type: boolean

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    if: github.event.inputs.run_tests != 'false'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            target
          key: ${{ runner.os }}-cargo-test-${{ hashFiles('**/Cargo.lock') }}

      - name: Check formatting
        run: cargo fmt -- --check

      - name: Run clippy
        run: cargo clippy -- -D warnings

      - name: Security audit
        run: cargo audit || echo "Audit completed with warnings"

      - name: Run unit tests
        run: cargo test --verbose

      - name: Run integration tests
        run: cargo test --test integration || echo "Integration tests completed"

  build:
    name: Build Infra
    needs: test
    strategy:
      matrix:
        include:
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            binary: infra.exe
            artifact_name: infra-windows
            ext: zip
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary: infra
            artifact_name: infra-linux
            ext: tar.gz
          - os: macos-latest
            target: x86_64-apple-darwin
            binary: infra
            artifact_name: infra-macos
            ext: tar.gz

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            target
          key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Add target
        run: rustup target add ${{ matrix.target }}

      - name: Build optimized binary
        run: |
          cargo build --release --target ${{ matrix.target }}
          # Strip binary to reduce size
          if [ "${{ matrix.os }}" != "windows-latest" ]; then
            strip target/${{ matrix.target }}/release/${{ matrix.binary }}
          fi

      - name: Run basic binary test
        run: |
          if [ "${{ matrix.os }}" != "windows-latest" ]; then
            ./target/${{ matrix.target }}/release/${{ matrix.binary }} --version
          else
            ./target/${{ matrix.target }}/release/${{ matrix.binary }} --version
          fi

      - name: Create release directory
        run: mkdir -p release

      - name: Copy binary (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          copy target\${{ matrix.target }}\release\${{ matrix.binary }} release\${{ matrix.binary }}
          copy install.ps1 release\
          copy README.md release\
          if exist LICENSE copy LICENSE release\

      - name: Copy binary (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          cp target/${{ matrix.target }}/release/${{ matrix.binary }} release/
          cp install.sh release/
          cp README.md release/
          cp LICENSE release/ 2>/dev/null || echo "LICENSE file optional"
          chmod +x release/${{ matrix.binary }}
          chmod +x release/install.sh

      - name: Verify release contents
        run: |
          echo "Release directory contents:"
          ls -la release/
          echo "Binary version:"
          cd release && ./${{ matrix.binary }} --version && cd ..

      - name: Create ZIP archive (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          cd release
          7z a ../${{ matrix.artifact_name }}.zip *
          cd ..

      - name: Create TAR archive (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          cd release
          tar -czf ../${{ matrix.artifact_name }}.tar.gz *
          cd ..

      - name: Verify archives
        run: |
          if [ "${{ matrix.os }}" != "windows-latest" ]; then
            echo "Archive size:"
            ls -lh *.${{ matrix.ext }}
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: |
            ${{ matrix.artifact_name }}.*
          retention-days: 30

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') || github.event.inputs.create_release == 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          cp artifacts/*/*.zip release-assets/ 2>/dev/null || echo "No ZIP files found"
          cp artifacts/*/*.tar.gz release-assets/ 2>/dev/null || echo "No TAR files found"
          echo "Release assets:"
          ls -la release-assets/

      - name: Verify archive integrity
        run: |
          for file in release-assets/*; do
            if [ -f "$file" ]; then
              echo "Verifying $(basename $file):"
              if [[ "$file" == *.zip ]]; then
                unzip -t "$file"
              elif [[ "$file" == *.tar.gz ]]; then
                tar -tzf "$file" | head -10
              fi
              echo "File size: $(du -h "$file" | cut -f1)"
              echo "---"
            fi
          done

      - name: Extract version from tag
        id: version
        run: |
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            VERSION="${{ github.ref_name }}"
            VERSION="${VERSION#v}"
          else
            VERSION="0.1.1"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Release version: $VERSION"

      - name: Generate checksums
        run: |
          cd release-assets
          sha256sum * > checksums.txt
          cat checksums.txt

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: release-assets/*
          name: Infra v${{ steps.version.outputs.version }}
          body: |
            # Infra Programming Language v${{ steps.version.outputs.version }}

            ## üöÄ Installation

            ### Quick Installation
            ```bash
            # Unix/Linux/macOS
            curl -fsSL https://raw.githubusercontent.com/Infra-Lang/infra/main/install.sh | sh

            # Windows PowerShell
            iwr -useb https://raw.githubusercontent.com/Infra-Lang/infra/main/install.ps1 | iex
            ```

            ### Manual Downloads

            #### Windows
            Download `infra-windows.zip` and extract to a folder of your choice.

            #### Linux
            Download `infra-linux.tar.gz` and extract:
            ```bash
            tar -xzf infra-linux.tar.gz
            cd release
            sudo cp infra /usr/local/bin/
            ```

            #### macOS
            Download `infra-macos.tar.gz` and extract:
            ```bash
            tar -xzf infra-macos.tar.gz
            cd release
            sudo cp infra /usr/local/bin/
            ```

            ## ‚ú® Features

            - **üéØ Clean Syntax**: Python-like, readable and intuitive
            - **üîß Optional Static Typing**: Type safety when you need it, flexibility when you don't
            - **üèóÔ∏è Object-Oriented Programming**: Classes, inheritance, methods, constructors
            - **‚ö° Async/Await**: Modern asynchronous programming with event loop
            - **üìö Rich Standard Library**: Math, String, Array, I/O, HTTP, JSON operations
            - **üõ†Ô∏è Professional Tooling**: CLI, REPL, enhanced error handling
            - **üìñ Comprehensive Documentation**: Complete guides and API reference

            ## üöÄ Quick Start

            Create a file `hello.if`:
            ```infra
            let name = "World"
            print(f"Hello, {name}!")

            // Functions
            function fibonacci(n: number): number {
                if n <= 1: return n
                return fibonacci(n - 1) + fibonacci(n - 2)
            }

            print(f"Fibonacci(10) = {fibonacci(10)}")

            // Object-Oriented Programming
            class Greeter:
                function init(name: string):
                    this.name = name

                function greet(): string {
                    return f"Hello, {this.name}!"
                }

            let greeter = Greeter("Infra")
            print(greeter.greet())

            // Async/Await
            async function fetch_data(): string {
                await async.sleep(1000)
                return "Data fetched successfully!"
            }

            fetch_data().then(data => print(data))
            ```

            Run it:
            ```bash
            infra hello.if
            # Or use REPL
            infra --repl
            ```

            ## üìö Documentation

            - [Language Guide](https://github.com/Infra-Lang/infra/blob/main/docs/LANGUAGE_GUIDE.md)
            - [Standard Library Reference](https://github.com/Infra-Lang/infra/blob/main/docs/STANDARD_LIBRARY.md)
            - [Installation Guide](https://github.com/Infra-Lang/infra/blob/main/docs/INSTALLATION.md)
            - [Async/Await Programming](https://github.com/Infra-Lang/infra/blob/main/docs/ASYNC_AWAIT.md)

            ## üèóÔ∏è Architecture

            Infra follows a clean, modular architecture with:
            - Frontend: Lexer, Parser, AST
            - Backend: Interpreter, Bytecode Generator, Virtual Machine
            - Standard Library: Math, String, Array, I/O, HTTP, JSON
            - CLI: Runner, REPL

            ## üîê Verification

            All release assets have been verified for integrity:
            - Binaries tested for basic functionality
            - Archives verified for integrity
            - SHA256 checksums provided below

            ## üôè Acknowledgments

            Built with Rust for safety and performance. Inspired by Python's readability and modern language features.

            ## üìû Support

            - üìö Documentation: https://github.com/Infra-Lang/infra/blob/main/README.md
            - üêõ Issues: https://github.com/Infra-Lang/infra/issues
            - üí¨ Discussions: https://github.com/Infra-Lang/infra/discussions

            ---

            **Ready to build with Infra? üöÄ**

            Verify installation:
            ```bash
            infra --version
            ```
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload checksums to release
        uses: softprops/action-gh-release@v1
        with:
          files: release-assets/checksums.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
