name: Auto Release on Push

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      version_bump:
        description: "Version bump type"
        required: true
        default: "patch"
        type: choice
        options:
          - patch
          - minor
          - major
      force_release:
        description: "Force release even if no version changes"
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  packages: write

jobs:
  check-for-changes:
    name: Check for Changes
    runs-on: ubuntu-latest
    outputs:
      should_release: ${{ steps.changes.outputs.should_release }}
      has_version_changes: ${{ steps.changes.outputs.has_version_changes }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for changes
        id: changes
        shell: bash
        run: |
          # Get the last tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")

          if [ -z "$LAST_TAG" ]; then
            echo "No previous tags found, this is the first release"
            echo "should_release=true" >> $GITHUB_OUTPUT
            echo "has_version_changes=true" >> $GITHUB_OUTPUT
          else
            echo "Last tag: $LAST_TAG"

            # Check if there are any changes since last tag
            CHANGES=$(git diff --name-only $LAST_TAG..HEAD)
            VERSION_CHANGES=$(git diff --name-only $LAST_TAG..HEAD | grep -E "(Cargo\.toml|wix/)" || echo "")

            if [ -n "$CHANGES" ]; then
              echo "Changes detected since last tag"
              echo "should_release=true" >> $GITHUB_OUTPUT

              if [ -n "$VERSION_CHANGES" ]; then
                echo "Version-related changes detected"
                echo "has_version_changes=true" >> $GITHUB_OUTPUT
              else
                echo "No version-related changes, will auto-bump patch version"
                echo "has_version_changes=false" >> $GITHUB_OUTPUT
              fi
            else
              echo "No changes since last tag"
              echo "should_release=false" >> $GITHUB_OUTPUT
              echo "has_version_changes=false" >> $GITHUB_OUTPUT
            fi
          fi

          # Check for force release flag
          if [ "${{ github.event.inputs.force_release }}" = "true" ]; then
            echo "Force release requested"
            echo "should_release=true" >> $GITHUB_OUTPUT
          fi

  auto-bump-version:
    name: Auto Bump Version
    runs-on: ubuntu-latest
    needs: check-for-changes
    if: needs.check-for-changes.outputs.should_release == 'true' && needs.check-for-changes.outputs.has_version_changes == 'false'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Auto bump version
        run: |
          VERSION_BUMP="${{ github.event.inputs.version_bump || 'patch' }}"
          python scripts/auto-version.py $VERSION_BUMP

  build-and-release:
    name: Build and Release
    needs: check-for-changes
    if: needs.check-for-changes.outputs.should_release == 'true'
    strategy:
      matrix:
        include:
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            binary: infra.exe
            artifact_name: infra-windows
            ext: zip
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary: infra
            artifact_name: infra-linux
            ext: tar.gz
          - os: macos-latest
            target: x86_64-apple-darwin
            binary: infra
            artifact_name: infra-macos
            ext: tar.gz

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            target
          key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock', '**/Cargo.toml') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ matrix.target }}-
            ${{ runner.os }}-cargo-

      - name: Add target
        run: rustup target add ${{ matrix.target }}

      - name: Install WIX Toolset (Windows)
        if: matrix.os == 'windows-latest'
        shell: bash
        run: |
          choco install wixtoolset -y
          echo "C:\Program Files (x86)\WiX Toolset v3.11\bin" >> $GITHUB_PATH

      - name: Install cargo-wix
        if: matrix.os == 'windows-latest'
        shell: bash
        run: cargo install cargo-wix

      - name: Get version from Cargo.toml
        id: version
        shell: bash
        run: |
          VERSION=$(grep -m1 '^version = ' Cargo.toml | cut -d'"' -f2)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Release version: $VERSION"

      - name: Build optimized binary
        shell: bash
        run: |
          cargo build --release --target ${{ matrix.target }}
          if [ "${{ matrix.os }}" != "windows-latest" ]; then
            strip target/${{ matrix.target }}/release/${{ matrix.binary }} || echo "Strip failed, continuing"
          fi

      - name: Run basic binary test
        shell: bash
        run: |
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            ./target/${{ matrix.target }}/release/${{ matrix.binary }}.exe --version || echo "Binary test failed, continuing"
          else
            ./target/${{ matrix.target }}/release/${{ matrix.binary }} --version || echo "Binary test failed, continuing"
          fi

      - name: Create release directory
        shell: bash
        run: mkdir -p release

      - name: Copy binary (Windows)
        if: matrix.os == 'windows-latest'
        shell: bash
        run: |
          mkdir -p release
          cp "target/${{ matrix.target }}/release/${{ matrix.binary }}" "release/${{ matrix.binary }}" || echo "Binary copy failed"
          if [ -f "install.ps1" ]; then cp "install.ps1" "release/" || echo "install.ps1 copy failed"; fi
          if [ -f "README.md" ]; then cp "README.md" "release/" || echo "README.md copy failed"; fi
          if [ -f "LICENSE" ]; then cp "LICENSE" "release/" || echo "LICENSE copy failed"; fi

      - name: Build MSI Installer (Windows)
        if: matrix.os == 'windows-latest'
        shell: bash
        run: |
          # Build MSI using cargo-wix with automatic file discovery
          echo "Building MSI with cargo-wix..."
          cargo wix --nocapture -v --install-version ${{ steps.version.outputs.version }}

      - name: Copy binary (Unix)
        if: matrix.os != 'windows-latest'
        shell: bash
        run: |
          mkdir -p release
          cp target/${{ matrix.target }}/release/${{ matrix.binary }} release/ || echo "Binary copy failed"
          cp install.sh release/ || echo "install.sh copy failed"
          cp README.md release/ || echo "README.md copy failed"
          chmod +x release/${{ matrix.binary }} || echo "chmod binary failed"
          chmod +x release/install.sh || echo "chmod install.sh failed"

      - name: Create ZIP archive (Windows)
        if: matrix.os == 'windows-latest'
        shell: bash
        run: |
          cd release
          7z a "../${{ matrix.artifact_name }}.zip" * || echo "ZIP creation failed"
          cd ..

      - name: Create TAR archive (Unix)
        if: matrix.os != 'windows-latest'
        shell: bash
        run: |
          cd release
          tar -czf ../${{ matrix.artifact_name }}.tar.gz * || echo "TAR creation failed"
          cd ..

      - name: Verify archives
        shell: bash
        run: |
          echo "Archive size:"
          ls -lh *.${{ matrix.ext }}
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            echo "MSI size:"
            ls -lh target/wix/infra-*.msi || echo "MSI not found"
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: |
            ${{ matrix.artifact_name }}.*
            target/wix/infra-*.msi
          retention-days: 30

  create-release:
    name: Create Release
    needs: [check-for-changes, build-and-release]
    if: needs.check-for-changes.outputs.should_release == 'true'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get version from Cargo.toml
        id: version
        shell: bash
        run: |
          VERSION=$(grep -m1 '^version = ' Cargo.toml | cut -d'"' -f2)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Release version: $VERSION"

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare release assets
        shell: bash
        run: |
          mkdir -p release-assets
          cp artifacts/*/*.zip release-assets/ 2>/dev/null || true
          cp artifacts/*/*.tar.gz release-assets/ 2>/dev/null || true
          cp artifacts/*/target/wix/infra-*.msi release-assets/ 2>/dev/null || true

          echo "Release assets:"
          ls -la release-assets/

      - name: Generate checksums
        shell: bash
        run: |
          cd release-assets
          sha256sum * > checksums.txt
          cat checksums.txt

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: release-assets/*
          name: Infra v${{ steps.version.outputs.version }}
          generate_release_notes: true
          draft: false
          prerelease: false
          tag_name: v${{ steps.version.outputs.version }}
          body: |
            # Infra Programming Language v${{ steps.version.outputs.version }}

            🚀 **Automated Release** - This release was automatically created when code was pushed to the main branch.

            ## 📦 Installation

            ### Windows (Recommended)
            Download `infra-${{ steps.version.outputs.version }}.msi` for a professional installer with:
            - Automatic PATH setup
            - Start Menu shortcuts
            - File associations for `.if` files
            - Clean uninstallation
            - System integration

            ### Windows (Advanced)
            Download `infra-windows.zip` for portable installation

            ### Linux
            Download `infra-linux.tar.gz` and extract:
            ```bash
            tar -xzf infra-linux.tar.gz
            cd release
            sudo cp infra /usr/local/bin/
            ```

            ### macOS
            Download `infra-macos.tar.gz` and extract:
            ```bash
            tar -xzf infra-macos.tar.gz
            cd release
            sudo cp infra /usr/local/bin/
            ```

            ## ✨ Features

            - 🎯 **Clean Syntax**: Python-like, readable and intuitive
            - 🔧 **Optional Static Typing**: Type safety when you need it, flexibility when you don't
            - 🏗️ **Object-Oriented Programming**: Classes, inheritance, methods, constructors
            - ⚡ **Async/Await**: Modern asynchronous programming with event loop
            - 📚 **Rich Standard Library**: Math, String, Array, I/O, HTTP, JSON operations
            - 🛠️ **Professional Tooling**: CLI, REPL, enhanced error handling
            - 📖 **Comprehensive Documentation**: Complete guides and API reference

            ## 🚀 Quick Start

            Create a file `hello.if`:
            ```infra
            let name = "World"
            print(f"Hello, {name}!")
            ```

            Run it:
            ```bash
            infra hello.if
            # Or use REPL
            infra --repl
            ```

            ## 📚 Documentation

            - [Language Guide](https://github.com/Infra-Lang/infra/blob/main/docs/LANGUAGE_GUIDE.md)
            - [Standard Library Reference](https://github.com/Infra-Lang/infra/blob/main/docs/STANDARD_LIBRARY.md)
            - [Installation Guide](https://github.com/Infra-Lang/infra/blob/main/docs/INSTALLATION.md)
            - [Async/Await Programming](https://github.com/Infra-Lang/infra/blob/main/docs/ASYNC_AWAIT.md)

            ## 🔐 Verification

            All release assets have been verified and checksummed. See `checksums.txt` for SHA256 hashes.

            ---
            **Ready to build with Infra? 🚀**

            Verify installation:
            ```bash
            infra --version
            ```
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
